import React, { JSX } from "react";
import "./Grid.css";
import Cell from "../Cell/Cell.tsx";
import CellBorder from "../CellBorder/CellBorder.tsx";

interface GridProps {
  sideLength: number;
}

function Grid({ sideLength }: GridProps) {
  const divs: JSX.Element[] = [];
  const width = (2 * 100.0) / (3 * sideLength - 1); // This should give consistent width
  const height = 100.0 / (2 * sideLength - 1); // This should give consistent height

  const shiftUpdate = height / 2.0;
  let shift = shiftUpdate * (2 * sideLength); // Start shift at 0 and update in the loop if needed
  const horizontalShift = -width / 4.0; // Horizontal offset for centering
  let count = 1; // cell ID initialization

  // First half of the columns
  for (let i = sideLength; i < 2 * sideLength; i++) {
    const tempDivs: JSX.Element[] = [];
    shift -= shiftUpdate; // Adjust vertical position (if needed, can be simplified)
    for (let j = 0; j < i; j++) {
      tempDivs.push(
        <div
          className="hex-grid"
          key={count}
          style={{
            width: `100%`,
            height: `${height}%`,
            backgroundColor: "blue",
          }}
        >
          {/* <h4>
            {width} {height}
          </h4> */}
          {/* <CellBorder /> */}
        </div>
      );
      ++count;
    }

    divs.push(<div className="hex-column">{tempDivs}</div>);
  }

  // Second half of the columns
  for (let i = 2 * sideLength - 2; i >= sideLength; i--) {
    const tempDivs: JSX.Element[] = [];
    shift -= shiftUpdate; // Adjust vertical position (if needed, can be simplified)
    for (let j = 0; j < i; j++) {
      tempDivs.push(
        <div
          className="hex-grid"
          key={count}
          style={{
            width: `${width}%`,
            height: `${height}%`,
            backgroundColor: "blue",
            // marginTop: `${shift}%`,
            // marginLeft: `${horizontalShift}%`,
          }}
        >
          {/* <h4>
            {width} {height}
          </h4> */}
          <CellBorder style={{ width: "100%", height: "100%" }} />
        </div>
        // <>
        //   <CellBorder style={{ width: `${width}%`, height: `${height}%` }} />
        // </>
      );
      ++count;
    }

    divs.push(
      <div
        key={`row-${i}`}
        className="hex-column"
        style={
          {
            // Makes the wrapper act like a fragment
          }
        }
      >
        {tempDivs}
      </div>
    );
  }

  // for (let i = sideLength; i < 2 * sideLength; i++) {
  //   const tempDivs: JSX.Element[] = [];
  //   shift -= shiftUpdate; // Adjust vertical position (if needed, can be simplified)
  //   for (let j = 0; j < i; j++) {
  //     tempDivs.push(
  //       <div
  //         className="hex-grid"
  //         style={{
  //           width: `${width}%`,
  //           height: `${height}%`,
  //           backgroundColor: "blue",
  //         }}
  //       >
  //         {/* <h4>
  //           {width} {height}
  //         </h4> */}
  //         {/* <CellBorder /> */}
  //       </div>
  //     );
  //   }

  //   divs.push(
  //     <div
  //       style={{
  //         marginTop: `${shift}%`,
  //         marginLeft: `${horizontalShift}%`,
  //       }}
  //     >
  //       <div
  //         key={`row-${i}`}
  //         className="hex-column"
  //         style={{
  //           width: "100%",
  //           height: "100%",
  //         }}
  //       >
  //         {tempDivs}
  //         <h1>sure</h1>
  //       </div>
  //     </div>
  //   );
  // }

  // Second half of the columns
  // for (let i = 2 * sideLength - 2; i >= sideLength; i--) {
  //   const tempDivs: JSX.Element[] = [];
  //   shift += shiftUpdate;
  //   for (let j = 0; j < i; j++) {
  //     tempDivs.push(
  //       <div key={`cell-${i}-${j}`} className="hex-grid">
  //         <CellBorder />
  //       </div>
  //     );
  //   }

  //   divs.push(
  //     <div
  //       key={`row-${i}`}
  //       style={{ marginTop: `${shift}px`, marginLeft: `${horizontalShift}%` }}
  //     >
  //       {tempDivs}
  //     </div>
  //   );
  // }

  //return <div className="grid-container">{divs}</div>;
  return (
    <>
      {/* <div
        className="hex-grid"
        style={{
          width: `${width}%`,
          height: `${height}%`,
          backgroundColor: "blue",
        }}
      >
        <h4>
          {width} {height}
        </h4>
        <CellBorder />
      </div> */}
      <div className="grid-container">{divs}</div>
    </>
  );
}

export default Grid;
